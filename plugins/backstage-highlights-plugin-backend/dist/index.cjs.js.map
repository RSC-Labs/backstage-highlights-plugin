{"version":3,"file":"index.cjs.js","sources":["../src/lib/gitlabApi.ts","../src/lib/fetchBranches.ts","../src/lib/fetchTags.ts","../src/lib/fetchCommits.ts","../src/service/router.ts","../src/plugin.ts"],"sourcesContent":["import {ResponseError} from \"@backstage/errors\";\n\n\nexport async function getGitlabProjectDetails(projectSlug:string, apiBaseUrl:string, token:string){\n    return callAPI(`${apiBaseUrl}/projects/${encodeURIComponent(projectSlug)}`, token);\n}\n\nexport async function getGitlabTags(projectId:string, apiBaseUrl:string, token:string) {\n    return callAPI(`${apiBaseUrl}/projects/${projectId}/repository/tags`, token);\n}\n\nexport async function getGitlabBranches(projectId:string, apiBaseUrl:string, token:string) {\n    return callAPI(`${apiBaseUrl}/projects/${projectId}/repository/branches`, token);\n}\n\nexport async function getGitlabCommits(projectId:string, apiBaseUrl:string, token:string) {\n    return callAPI(`${apiBaseUrl}/projects/${projectId}/repository/commits`, token);\n}\n\nasync function callAPI(url:string, token:string) {\n    const options = { headers: { 'PRIVATE-TOKEN': token}};\n\n    const response = await fetch(url, options);\n\n    if (response.status !== 200) {\n        throw await ResponseError.fromResponse(response);\n    }\n\n    return await response.json();\n}","/*\n * Copyright 2023 RSC-Labs, https://rsoftcon.com/\n *\n * Licensed under the Mozilla Public License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.mozilla.org/en-US/MPL/2.0/\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Octokit } from '@octokit/rest';\nimport { GitBranch } from '../types';\nimport { getGitlabBranches, getGitlabProjectDetails } from './gitlabApi';\n\n\nexport async function fetchGithubBranches(projectSlug: string, token: string, baseUrl?: string): Promise<string[]> {\n    const octokit = new Octokit({\n        auth: token,\n        baseUrl: baseUrl\n    })\n\n    const slugSplitted = projectSlug.split('/');\n\n    const result = await octokit.request(`GET /repos/${projectSlug}/branches`, {\n        owner: slugSplitted[0],\n        repo: slugSplitted[1],\n    })\n\n    const branches = result.data.map((singleData: { name: any; }) => singleData.name);\n\n    return branches;\n}\n\nexport async function fetchGitlabBranches(projectSlug: string, token: string, apiBaseUrl: string): Promise<GitBranch[]> {\n\n    const projectDetails = await getGitlabProjectDetails(projectSlug, apiBaseUrl, token);\n    const projectId = projectDetails.id;\n\n    const resultJson = await getGitlabBranches(projectId, apiBaseUrl, token);\n\n    const branches = resultJson.map((singleResult: { name: any; }) => singleResult.name);\n\n    return branches;\n}","/*\n * Copyright 2023 RSC-Labs, https://rsoftcon.com/\n *\n * Licensed under the Mozilla Public License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.mozilla.org/en-US/MPL/2.0/\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Octokit } from '@octokit/rest';\nimport { GitTag } from '../types';\nimport { getGitlabProjectDetails, getGitlabTags } from './gitlabApi';\n\n\nexport async function fetchGithubTags(projectSlug: string, token: string, baseUrl?: string): Promise<GitTag[]> {\n    const octokit = new Octokit({\n        auth: token,\n        baseUrl: baseUrl\n    })\n\n    const slugSplitted = projectSlug.split('/');\n\n    const githubTags = await octokit.request(`GET /repos/${projectSlug}/tags`, {\n        owner: slugSplitted[0],\n        repo: slugSplitted[1],\n    })\n    \n    const repoInfo = await octokit.request(`GET /repos/${projectSlug}`, {\n        owner: slugSplitted[0],\n        repo: slugSplitted[1],\n    })\n\n    const tags: GitTag[] = githubTags.data.map(((singleData: { name: any, commit: any; }) => {\n        return {\n            name: singleData.name,\n            tagUrl: `${repoInfo.data.html_url} + '/releases/tag/' + ${singleData.name}`,\n            commitId: singleData.commit.sha,\n            commitUrl: `${repoInfo.data.html_url} + '/commits/' + ${singleData.commit.sha}`,\n            commitApiUrl: singleData.commit.url\n        }\n    }));\n\n    return tags;\n}\n\nexport async function fetchGitlabTags(projectSlug: string, token: string, apiBaseUrl: string): Promise<GitTag[]> {\n\n    const projectDetails = await getGitlabProjectDetails(projectSlug, apiBaseUrl, token);\n    const projectId = projectDetails.id;\n\n    const tagsJson = await getGitlabTags(projectId, apiBaseUrl, token);\n\n    const tags = tagsJson.map((singleResult: { name: any; commit: { id: any; message: any; }; }) => {\n        return {\n            name: singleResult.name,\n            tagUrl: `${projectDetails.web_url}/-/releases/${singleResult.name}`,\n            commitId: singleResult.commit.id,\n            commitUrl: `${projectDetails.web_url}/-/commit/${singleResult.commit.id}`,\n            commitMessage: singleResult.commit.message\n        }\n    })\n\n    return tags;\n}","/*\n * Copyright 2023 RSC-Labs, https://rsoftcon.com/\n *\n * Licensed under the Mozilla Public License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.mozilla.org/en-US/MPL/2.0/\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Octokit,  } from '@octokit/rest';\nimport { GitCommit } from '../types';\nimport { getGitlabCommits, getGitlabProjectDetails } from './gitlabApi';\n\nexport async function fetchGithubCommit(projectSlug: string, token: string, id: string, baseUrl?: string): Promise<GitCommit> {\n    const octokit = new Octokit({\n        auth: token,\n        baseUrl: baseUrl\n    })\n\n    const slugSplitted = projectSlug.split('/');\n\n    const result = await octokit.request(`GET /repos/${projectSlug}/commits/${id}`, {\n        owner: slugSplitted[0],\n        repo: slugSplitted[1],\n    })\n\n    return {\n        id: result.data.sha,\n        author: result.data.commit.author.name,\n        authorHtmlUrl: result.data.author.html_url,\n        htmlUrl: result.data.html_url,\n        message: result.data.commit.message,\n        date: result.data.commit.author.date\n    }\n}\n\n\nexport async function fetchGithubCommits(projectSlug: string, token: string, baseUrl?: string): Promise<GitCommit[]> {\n    const octokit = new Octokit({\n        auth: token,\n        baseUrl: baseUrl\n    })\n\n    const slugSplitted = projectSlug.split('/');\n\n    const result = await octokit.request(`GET /repos/${projectSlug}/commits`, {\n        owner: slugSplitted[0],\n        repo: slugSplitted[1],\n    })\n\n    const commits = result.data.map((singleData: {\n        html_url: any;\n        author: any; sha: any; commit: { author: { name: any; date: any, html_url: any }; htmlUrl: any; message: any; }; \n}) => {\n        return {\n            id: singleData.sha,\n            author: singleData.commit.author.name,\n            authorHtmlUrl: singleData.author.html_url,\n            htmlUrl: singleData.html_url,\n            message: singleData.commit.message,\n            date: singleData.commit.author.date\n        }\n    });\n\n    return commits;\n}\n\nexport async function fetchGitlabCommits(projectSlug: string, token: string, apiBaseUrl: string): Promise<GitCommit[]> {\n\n    const projectDetails = await getGitlabProjectDetails(projectSlug, apiBaseUrl, token);\n    const projectId = projectDetails.id;\n\n    const resultJson = await getGitlabCommits(projectId, apiBaseUrl, token);\n\n    const commits = resultJson.map(((singleResult: { id: any; author_name: any; web_url: any; message: any; committed_date: any; committer_name: any; }) => {\n        return {\n            id: singleResult.id,\n            author: singleResult.author_name,\n            htmlUrl: singleResult.web_url,\n            message: singleResult.message,\n            date: singleResult.committed_date\n        }\n    }));\n\n    return commits;\n}\n\n","/*\n * Copyright 2023 RSC-Labs, https://rsoftcon.com/\n *\n * Licensed under the Mozilla Public License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.mozilla.org/en-US/MPL/2.0/\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { errorHandler, TokenManager, PluginEndpointDiscovery } from '@backstage/backend-common';\nimport { readGithubIntegrationConfig, readGitLabIntegrationConfig } from '@backstage/integration';\nimport { CatalogClient, CatalogApi } from '@backstage/catalog-client';\nimport { NotFoundError } from '@backstage/errors';\nimport * as express from \"express\";\nimport Router from 'express-promise-router';\nimport { Logger } from 'winston';\nimport { Config } from '@backstage/config';\nimport { fetchGithubBranches, fetchGitlabBranches } from '../lib/fetchBranches';\nimport { fetchGithubTags, fetchGitlabTags } from '../lib/fetchTags';\nimport { fetchGithubCommits, fetchGithubCommit, fetchGitlabCommits } from '../lib/fetchCommits';\nimport { Entity } from '@backstage/catalog-model';\n\ntype GithubConfig = {\n  token?: string,\n  apiBaseUrl?: string\n}\n\ntype GitlabConfig = {\n  token?: string,\n  apiBaseUrl?: string\n}\n\nfunction getGithubConfigFromHighlights(config: Config): GithubConfig | undefined {\n  const githubConfig = config.getOptionalConfig('highlights.github');\n  if (githubConfig) {\n    return {\n      token: githubConfig.getOptionalString('token'),\n      apiBaseUrl: githubConfig.getOptionalString('apiBaseUrl')\n    }\n  }\n  return undefined;\n}\n\nfunction getGitlabConfigFromHighlights(config: Config, instance: string | undefined): GitlabConfig | undefined {\n  try {\n    const gitlabConfigs = config.getOptionalConfigArray('highlights.gitlab');\n    if (gitlabConfigs && instance) {\n      for (let i = 0; i < gitlabConfigs.length; i++) {\n        if (gitlabConfigs[i].getOptionalString('host') && gitlabConfigs[i].getOptionalString('host') == instance) {\n          return {\n            token: gitlabConfigs[i].getOptionalString('token'),\n            apiBaseUrl: gitlabConfigs[i].getOptionalString('apiBaseUrl')\n          }\n        }\n      }\n      return undefined;\n    }\n    if (gitlabConfigs && gitlabConfigs.length) {\n      return {\n        token: gitlabConfigs[0].getOptionalString('token'),\n        apiBaseUrl: gitlabConfigs[0].getOptionalString('apiBaseUrl')\n      }\n    }\n    return undefined;\n \n  } catch {\n    const gitlabConfig = config.getOptionalConfig('highlights.gitlab');\n    if (gitlabConfig) {\n      return {\n        token: gitlabConfig.getOptionalString('token'),\n        apiBaseUrl: gitlabConfig.getOptionalString('apiBaseUrl')\n      }\n    }\n    return undefined;\n  }\n}\n\nfunction getGithubConfig(config: Config): GithubConfig | undefined {\n  if (getGithubConfigFromHighlights(config)) {\n    return getGithubConfigFromHighlights(config);\n  }\n  const githubConfigArray = config.getOptionalConfigArray('integrations.github');\n  if (githubConfigArray && githubConfigArray.length) {\n    const integrationConfig = readGithubIntegrationConfig(githubConfigArray[0]);\n    return {\n      token: integrationConfig.token,\n      apiBaseUrl: integrationConfig.apiBaseUrl\n    }\n  }\n  return undefined;\n}\n\nfunction getGitlabConfig(config: Config, entity: Entity): GitlabConfig | undefined {\n\n  const gitlabInstanceAnnotation: string | undefined = entity?.metadata.annotations?.['gitlab.com/instance'];\n\n  if (getGitlabConfigFromHighlights(config, gitlabInstanceAnnotation)) {\n    return getGitlabConfigFromHighlights(config, gitlabInstanceAnnotation);\n  }\n  const gitlabConfigArray = config.getOptionalConfigArray('integrations.gitlab'); \n  if (gitlabConfigArray && gitlabConfigArray.length) {\n    if (gitlabInstanceAnnotation) {\n      for (let i = 0; i < gitlabConfigArray.length; i++) {\n        if (gitlabConfigArray[i].getOptionalString('host') && gitlabConfigArray[i].getOptionalString('host') == gitlabInstanceAnnotation) {\n          return {\n            token: gitlabConfigArray[i].getOptionalString('token'),\n            apiBaseUrl: gitlabConfigArray[i].getOptionalString('apiBaseUrl')\n          }\n        }\n      }\n    }\n    const integrationConfig = readGitLabIntegrationConfig(gitlabConfigArray[0]);\n    return {\n      token: integrationConfig.token,\n      apiBaseUrl: integrationConfig.apiBaseUrl\n    }\n  }\n  return undefined;\n}\n\nexport interface RouterOptions {\n  logger: Logger;\n  tokenManager: TokenManager;\n  discovery: PluginEndpointDiscovery,\n  config: Config;\n  catalogApi?: CatalogApi\n}\n\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const { logger, tokenManager, discovery, config } = options;\n\n  const catalogApi =\n    options.catalogApi ?? new CatalogClient({ discoveryApi: discovery });\n  \n  const router = Router();\n  router.use(express.json());\n\n  router.get('/health', async () => {\n    logger.info('PONG!');\n  });\n\n  router.get('/entity/:namespace/:kind/:name/fetchBranches', async (req, res) => {\n    const token = await tokenManager.getToken();\n    const { namespace, kind, name } = req.params;\n    const entity = await catalogApi.getEntityByRef(\n      { namespace, kind, name },\n      token,\n    );\n    if (!entity) {\n      throw new NotFoundError(\n        `No ${kind} entity in ${namespace} named \"${name}\"`,\n      );\n    }\n\n    const githubProject = entity?.metadata.annotations?.['github.com/project-slug'];\n\n    if (githubProject) {\n        const githubConfig = getGithubConfig(config);\n        if (githubConfig && githubConfig.token) {\n          const result = await fetchGithubBranches(githubProject, githubConfig.token, githubConfig.apiBaseUrl);\n          return res.status(200).json({branches: result});\n        }\n    }\n\n    const gitlabProject = entity?.metadata.annotations?.['gitlab.com/project-slug'];\n\n    if (gitlabProject) {\n      const gitlabConfig = getGitlabConfig(config, entity);\n      if (gitlabConfig && gitlabConfig.token && gitlabConfig.apiBaseUrl) {\n        const result = await fetchGitlabBranches(gitlabProject, gitlabConfig.token, gitlabConfig.apiBaseUrl);\n        return res.status(200).json({branches: result});\n      }\n    }\n\n    return res.status(500).json()\n  });\n\n  router.get('/entity/:namespace/:kind/:name/fetchTags', async (req, res) => {\n    const token = await tokenManager.getToken();\n    const { namespace, kind, name } = req.params;\n    const entity = await catalogApi.getEntityByRef(\n      { namespace, kind, name },\n      token,\n    );\n    if (!entity) {\n      throw new NotFoundError(\n        `No ${kind} entity in ${namespace} named \"${name}\"`,\n      );\n    }\n\n    const githubProject = entity?.metadata.annotations?.['github.com/project-slug'];\n\n    if (githubProject) {\n      const githubConfig = getGithubConfig(config);\n      if (githubConfig && githubConfig.token) {\n        const result = await fetchGithubTags(githubProject, githubConfig.token, githubConfig.apiBaseUrl);\n        return res.status(200).json({tags: result});\n      }\n    }\n\n    const gitlabProject = entity?.metadata.annotations?.['gitlab.com/project-slug'];\n\n    if (gitlabProject) {\n      const gitlabConfig = getGitlabConfig(config, entity);\n      if (gitlabConfig && gitlabConfig.token && gitlabConfig.apiBaseUrl) {\n        const result = await fetchGitlabTags(gitlabProject, gitlabConfig.token, gitlabConfig.apiBaseUrl);\n        return res.status(200).json({tags: result});\n      }\n    }\n\n    return res.status(500).json()\n  });\n\n  router.get('/entity/:namespace/:kind/:name/fetchCommits', async (req, res) => {\n\n    const token = await tokenManager.getToken();\n    const { namespace, kind, name } = req.params;\n    const entity = await catalogApi.getEntityByRef(\n      { namespace, kind, name },\n      token,\n    );\n    if (!entity) {\n      throw new NotFoundError(\n        `No ${kind} entity in ${namespace} named \"${name}\"`,\n      );\n    }\n\n    const githubProject = entity?.metadata.annotations?.['github.com/project-slug'];\n\n    if (githubProject) {\n      const githubConfig = getGithubConfig(config);\n      if (githubConfig && githubConfig.token) {\n        const result = await fetchGithubCommits(githubProject, githubConfig.token, githubConfig.apiBaseUrl);\n        return res.status(200).json({commits: result});\n      }\n    }\n\n    const gitlabProject = entity?.metadata.annotations?.['gitlab.com/project-slug'];\n\n    if (gitlabProject) {\n      const gitlabConfig = getGitlabConfig(config, entity);\n      if (gitlabConfig && gitlabConfig.token && gitlabConfig.apiBaseUrl) {\n        const result = await fetchGitlabCommits(gitlabProject, gitlabConfig.token, gitlabConfig.apiBaseUrl);\n        return res.status(200).json({commits: result});\n      }\n    }\n\n    return res.status(500).json()\n  });\n\n  router.get('/entity/:namespace/:kind/:name/fetchCommits/:id', async (req, res) => {\n\n    const token = await tokenManager.getToken();\n    const { namespace, kind, name, id } = req.params;\n    const entity = await catalogApi.getEntityByRef(\n      { namespace, kind, name },\n      token,\n    );\n    if (!entity) {\n      throw new NotFoundError(\n        `No ${kind} entity in ${namespace} named \"${name}\"`,\n      );\n    }\n\n    if (id) {\n      const githubProject = entity?.metadata.annotations?.['github.com/project-slug'];\n\n      if (githubProject) {\n        const githubConfig = getGithubConfig(config);\n        if (githubConfig && githubConfig.token) {\n          const result = await fetchGithubCommit(githubProject, githubConfig.token, id, githubConfig.apiBaseUrl);\n          return res.status(200).json({commits: result});\n        }\n      }\n    }\n\n    return res.status(500).json()\n  });\n\n  router.use(errorHandler());\n  return router;\n}\n","/*\n * Copyright 2023 RSC-Labs, https://rsoftcon.com/\n *\n * Licensed under the Mozilla Public License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.mozilla.org/en-US/MPL/2.0/\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { loggerToWinstonLogger } from '@backstage/backend-common';\nimport {\n  coreServices,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\nimport { createRouter } from './service/router';\n\n/**\n * Highlights backend plugin\n *\n * @public\n */\nexport const highlightsPlugin = createBackendPlugin({\n  pluginId: 'highlights',\n  register(env) {\n    env.registerInit({\n      deps: {\n        logger: coreServices.logger,\n        httpRouter: coreServices.httpRouter,\n        tokenManager: coreServices.tokenManager,\n        discovery: coreServices.discovery,\n        config: coreServices.rootConfig,\n      },\n      async init({ logger, httpRouter, tokenManager, discovery, config }) {\n        httpRouter.use(\n          await createRouter({\n            logger: loggerToWinstonLogger(logger),\n            tokenManager: tokenManager,\n            discovery: discovery,\n            config: config\n          }),\n        );\n      },\n    });\n  },\n});"],"names":["ResponseError","Octokit","readGithubIntegrationConfig","readGitLabIntegrationConfig","CatalogClient","Router","express","_a","NotFoundError","errorHandler","createBackendPlugin","coreServices","loggerToWinstonLogger"],"mappings":"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"}
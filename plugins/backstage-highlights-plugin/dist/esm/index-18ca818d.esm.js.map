{"version":3,"file":"index-18ca818d.esm.js","sources":["../../src/api/HighlightsApi.ts","../../src/routes.ts","../../src/api/HighlightsClient.ts","../../src/plugin.ts","../../src/util/types.ts","../../src/util/constants.ts"],"sourcesContent":["/*\n * Copyright 2023 RSC-Labs, https://rsoftcon.com/\n *\n * Licensed under the Mozilla Public License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.mozilla.org/en-US/MPL/2.0/\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { createApiRef } from '@backstage/core-plugin-api';\nimport { GitBranch, GitCommit, GitInfo, GitTag } from './types';\n\n/** @public */\nexport const highlightsApiRef = createApiRef<HighlightsApi>({\n    id: 'plugin.highlights.client',\n});\n\n/** @public */\nexport interface HighlightsApi {\n    fetchTags(entity: Entity): Promise<GitTag[]>\n    fetchBranches(entity: Entity): Promise<GitBranch[]>\n    fetchCommits(entity: Entity): Promise<GitCommit[]>\n    fetchCommit(entity: Entity, id: string): Promise<GitCommit>\n    fetchAll(entity: Entity): Promise<GitInfo>\n}","/*\n * Copyright 2023 RSC-Labs, https://rsoftcon.com/\n *\n * Licensed under the Mozilla Public License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.mozilla.org/en-US/MPL/2.0/\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createRouteRef } from '@backstage/core-plugin-api';\n\nexport const rootRouteRef = createRouteRef({\n  id: 'backstage-highlights',\n});\n","/*\n * Copyright 2023 RSC-Labs, https://rsoftcon.com/\n *\n * Licensed under the Mozilla Public License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.mozilla.org/en-US/MPL/2.0/\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiscoveryApi, FetchApi } from '@backstage/core-plugin-api';\nimport { GitCommit, GitInfo, GitTag, GitBranch } from './types';\nimport { HighlightsApi } from './HighlightsApi';\nimport { DEFAULT_NAMESPACE, Entity } from '@backstage/catalog-model';\nimport { generatePath } from 'react-router-dom';\nimport { ResponseError } from '@backstage/errors';\n\n\n/** @public */\nexport class HighlightsClient implements HighlightsApi {\n  private readonly discoveryApi: DiscoveryApi;\n  private readonly fetchApi: FetchApi;\n  public constructor(options: {\n    discoveryApi: DiscoveryApi;\n    fetchApi: FetchApi;\n  }) {\n    this.discoveryApi = options.discoveryApi;\n    this.fetchApi = options.fetchApi;\n  }\n\n  private getEntityRouteParams(entity: Entity) {\n    return {\n      kind: entity.kind.toLocaleLowerCase('en-US'),\n      namespace:\n        entity.metadata.namespace?.toLocaleLowerCase('en-US') ??\n        DEFAULT_NAMESPACE,\n      name: entity.metadata.name,\n    };\n  }\n\n  public async fetchAll(entity: Entity) : Promise<GitInfo> {\n    const commits = await this.fetchCommits(entity);\n    const branches = await this.fetchBranches(entity);\n    const tags = await this.fetchTags(entity);\n\n    return {\n      branches: branches,\n      tags: tags,\n      commits: commits\n    }\n  }\n\n  public async fetchCommits(entity: Entity): Promise<GitCommit[]> {\n    const routeParams = this.getEntityRouteParams(entity);\n    const path = generatePath(`:namespace/:kind/:name`, routeParams);\n    const baseUrl = await this.discoveryApi.getBaseUrl('highlights');\n    const response = await this.fetchApi.fetch(`${baseUrl}/entity/${path}/fetchCommits`);\n    if (!response.ok) {\n        throw await ResponseError.fromResponse(response);\n    }\n    const result = await response.json();\n    return result.commits;\n  }\n\n  public async fetchCommit(entity: Entity, id: string): Promise<GitCommit> {\n    const routeParams = this.getEntityRouteParams(entity);\n    const path = generatePath(`:namespace/:kind/:name`, routeParams);\n    const baseUrl = await this.discoveryApi.getBaseUrl('highlights');\n    const response = await this.fetchApi.fetch(`${baseUrl}/entity/${path}/fetchCommits/${id}`);\n    if (!response.ok) {\n        throw await ResponseError.fromResponse(response);\n    }\n    const result = await response.json();\n    return result.commits;\n  }\n\n  public async fetchBranches(entity: Entity): Promise<GitBranch[]> {\n    const routeParams = this.getEntityRouteParams(entity);\n    const path = generatePath(`:namespace/:kind/:name`, routeParams);\n    const baseUrl = await this.discoveryApi.getBaseUrl('highlights');\n    const response = await this.fetchApi.fetch(`${baseUrl}/entity/${path}/fetchBranches`);\n    if (!response.ok) {\n        throw await ResponseError.fromResponse(response);\n    }\n    const result = await response.json();\n    return result.branches;\n  }\n\n  public async fetchTags(entity: Entity): Promise<GitTag[]> {\n    const routeParams = this.getEntityRouteParams(entity);\n    const path = generatePath(`:namespace/:kind/:name`, routeParams);\n    const baseUrl = await this.discoveryApi.getBaseUrl('highlights');\n    const response = await this.fetchApi.fetch(`${baseUrl}/entity/${path}/fetchTags`);\n    if (!response.ok) {\n        throw await ResponseError.fromResponse(response);\n    }\n    const result = await response.json();\n    return result.tags;\n  }\n}","/*\n * Copyright 2023 RSC-Labs, https://rsoftcon.com/\n *\n * Licensed under the Mozilla Public License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.mozilla.org/en-US/MPL/2.0/\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createApiFactory, createComponentExtension, createPlugin, discoveryApiRef, fetchApiRef } from '@backstage/core-plugin-api';\nimport { highlightsApiRef } from './api';\nimport { rootRouteRef } from './routes';\nimport { HighlightsClient } from './api/HighlightsClient';\n\n/** @public */\nexport const backstageHighlightsPlugin = createPlugin({\n  id: 'highlights',\n  apis: [\n    createApiFactory({\n      api: highlightsApiRef,\n      deps: {\n        discoveryApi: discoveryApiRef,\n        fetchApi: fetchApiRef\n      },\n      factory: ({  discoveryApi, fetchApi }) => \n        new HighlightsClient({\n          discoveryApi,\n          fetchApi\n        }),\n    }),\n  ],\n  routes: {\n    root: rootRouteRef,\n  },\n});\n\n/** @public */\nexport const EntityHighlightsCard = backstageHighlightsPlugin.provide(\n  createComponentExtension({\n    name: 'EntityHighlightsCard',\n    component: {\n      lazy: () =>\n        import('./components').then(m => m.HighlightsCard),\n    },\n  }),\n)","import { ReactChild } from \"react\";\n\n/** @public */\nexport enum EHighlightFields {\n    latest_tag = 'latest_tag',\n    latest_commit = 'latest_commit',\n    number_of_branches = 'number_of_branches',\n    commit_date = 'commit_date',\n    author = 'author',\n    clone = 'clone'\n}\n\n/** @public */\nexport type HighlightCustomField = {\n    fieldLabel?: string,\n    field: ReactChild\n}\n\n/** @public */\nexport interface EntityHighlightsProps {\n    fields? : EHighlightFields[],\n    customFields?: HighlightCustomField[]\n}","/*\n * Copyright 2023 RSC-Labs, https://rsoftcon.com/\n *\n * Licensed under the Mozilla Public License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.mozilla.org/en-US/MPL/2.0/\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EHighlightFields } from \"./types\";\n\n/** @public */\nexport const GITHUB_ANNOTATION_PROJECT_SLUG = 'github.com/project-slug';\n/** @public */\nexport const GITLAB_ANNOTATION_PROJECT_SLUG = 'gitlab.com/project-slug';\n\nexport const DefaultGitInfoFields: EHighlightFields[] = [\n    EHighlightFields.latest_tag,\n    EHighlightFields.number_of_branches,\n    EHighlightFields.latest_commit,\n    EHighlightFields.commit_date,\n    EHighlightFields.author,\n    EHighlightFields.clone,\n]"],"names":["EHighlightFields"],"mappings":"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"}